class Node{
	int data;
	Node next;
	Node(int data){
		this.data = data;
		next = null;
	}
}
class LinkedList{
	Node head,next,a,b;
	int count = 0;
	public void createList(){
		Node n = new Node(10);
		head = n;
		for(int i=2;i<=10;i++){
			n = n.next = new Node(i*10);
		}
	}
	public void printList(Node head){
		Node t = head;
		while(t.next!=null){
			System.out.print(t.data+" ");
			t = t.next;
		}
	}
	public void insertInMiddle(int data,int val){
		Node t = head;
		Node temp,temp1,temp2 = null;
		while(true){
			if(t.data == data){
				temp = t;
				temp1 = t.next;
				break;
			}
			t = t.next;
		}
		Node nnode = new Node(val);
		t.next = nnode;
		nnode.next = temp1;
	}
	public void insertInFront(int val){
		Node t = head;
		Node nnode = new Node(val);
		nnode.next = head;
		head = nnode;
	}
	public void insertInEnd(int val){
		next = null;
		Node t = head;
		while(t.next!=null){
				t= t.next;
		}
		Node nnode = new Node(val);
		t.next = nnode;
		t.next.next = null;
	}
	public void deleteFromFront(){
		Node t = head;
		Node temp = head.next;
		head = head.next;
	}
	public void deleteFromEnd(){
		Node t = head;
		Node temp = null;
		while(true){
			if(t.next == null){
				
				break;
			}
			t = t.next;
		}
		t.next = null;
	}
	public void deleteAfterNode(int val){
		Node t = head;
		while(true){
			if(t.next.data == val){
				break;
			}
			t = t.next;
		}
		System.out.println(t.data);
	}
	public void deleteBeforeNode(int val){
	}
	public void printListIterative(){
		Node t = head;
		while(t.next!=null){
			count = count+1;
			t = t.next;
		}
		System.out.println("Count :"+count);
		count = 0;
	}
	public int countRecursive(Node t){
		if(t==null)
			return count;
		else{
			t = t.next;
			++count;
			return countRecursive(t);
		}
	}
	public void swapnodes(int x,int y){
		if(x==y)
			return;
		Node currx = head;
		Node prevx = null;
		Node curry = head;
		Node prevy = null;
		
		while(currx.data!= x && currx!=null){
			prevx = currx;
			currx = currx.next;
		}
		while(curry.data!=y && curry!=null){
			prevy = curry;
			curry = curry.next;
		}
		if(currx==null || curry == null)
			return;
		if(prevx!= null)
			prevx.next = curry;
		else
			head = curry;
		
		if(prevy!=null)
			prevy.next = currx;
		else
			head = currx;
		
		Node temp = currx.next;
		currx.next = curry.next;
		curry.next = temp;
	}
	public Node reverseListSimple(Node node){
		Node curr = node;
		Node prev = null;
		Node next = null;
		while(curr!=null){
			next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
		}
		//System.out.println();
		node = prev;
	//	System.out.println(node.data);
		return node;
	}
	public void createOddList(){
		Node n = new Node(2);
		a = n;
		for(int i=4;i<=10;i=i+2){
			n = n.next = new Node(i);
		}
	}
	public void createEvenList(){
		Node n = new Node(1);
		b = n;
		for(int i=3;i<=10;i=i+2){
			n = n.next = new Node(i);
		}
	}
	public void printOddList(){
		Node t = a;
		while(t.next!=null){
			System.out.print(t.data+" ");
			t = t.next;
		}
	}
	public void printEvenList(){
		Node t = b;
		while(t.next!=null){
			System.out.print(t.data+" ");
			t = t.next;
		}
	}
	public Node sortMerge(Node one,Node two){
		Node result = null;
		if(one==null)
			return two;
		else if(two == null)
			return one;
		if(one.data<=two.data){
			result = one;
			result.next = sortMerge(one.next,two);
		}
		else{
			result = two;
			result.next = sortMerge(one,two.next);
		}
	}
}public class MainClass{
	public static void main(String[] args)
	{
		LinkedList lst = new LinkedList();
		lst.createList();
		lst.printList(lst.head);
		System.out.println();
		lst.insertInMiddle(50,55);
		lst.printList(lst.head);
		System.out.println();
		lst.insertInFront(100);
		lst.printList(lst.head);
		System.out.println();
		lst.insertInEnd(110);
		lst.printList(lst.head);
		System.out.println();
		/*lst.deleteFromFront();
		lst.printList(lst.head);
		System.out.println();
		lst.deleteFromEnd();
		lst.printList(lst.head);
		System.out.println();
		lst.deleteAfterNode();
		lst.printList(lst.head);
		System.out.println();*/
		Node temp = lst.reverseListSimple(lst.head);
		lst.printList(temp);
		System.out.println();
		lst.createOddList();
		lst.printOddList();
		System.out.println();
		lst.createEvenList();
		lst.printEvenList();
		Node temp = sortMerge(a,b);
	}
}
