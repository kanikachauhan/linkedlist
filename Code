import java.util.*;
import java.lang.Math.*;
class Node{
	int data;
	Node next,right,down;
	Node(int data){
		this.data = data;
		next = null;
	}
}
class LinkedList{
	Stack stk = new Stack();
	Node head,next,a,b,h1,h2;
	boolean flag = false;
	int count = 0;
	Node[] arr = new Node[2];
	public void createList(){
		Node n = new Node(10);
		head = n;
		for(int i=2;i<=10;i++){
			n = n.next = new Node(i*10);
		}
	}
	public void printList(Node head){
		Node t = head;
		while(t!=null){
			System.out.print(t.data+" ");
			t = t.next;
		}
	}
	public void insertInMiddle(int data,int val){
		Node t = head;
		Node temp,temp1,temp2 = null;
		while(true){
			if(t.data == data){
				temp = t;
				temp1 = t.next;
				break;
			}
			t = t.next;
		}
		Node nnode = new Node(val);
		t.next = nnode;
		nnode.next = temp1;
	}
	public void insertInFront(int val){
		Node t = head;
		Node nnode = new Node(val);
		nnode.next = head;
		head = nnode;
	}
	public void insertInEnd(int val){
		next = null;
		Node t = head;
		while(t.next!=null){
				t= t.next;
		}
		Node nnode = new Node(val);
		t.next = nnode;
		t.next.next = null;
	}
	public void deleteFromFront(){
		Node t = head;
		Node temp = head.next;
		head = head.next;
	}
	public void deleteFromEnd(){
		Node t = head;
		Node temp = null;
		while(true){
			if(t.next == null){
				
				break;
			}
			t = t.next;
		}
		t.next = null;
	}
	public void deleteAfterNode(int val){
		Node t = head;
		while(true){
			if(t.next.data == val){
				t.next = t.next.next;
			}
			t = t.next;
		}
		//System.out.println(t.data);
	}
	public void deleteBeforeNode(int val){
	}
	public void printListIterative(){
		Node t = head;
		while(t.next!=null){
			count = count+1;
			t = t.next;
		}
		System.out.println("Count :"+count);
		count = 0;
	}
	public int countRecursive(Node t){
		if(t==null)
			return count;
		else{
			t = t.next;
			++count;
			return countRecursive(t);
		}
	}
	public void swapnodes(int x,int y){
		if(x==y)
			return;
		Node currx = head;
		Node prevx = null;
		Node curry = head;
		Node prevy = null;
		
		while(currx.data!= x && currx!=null){
			prevx = currx;
			currx = currx.next;
		}
		while(curry.data!=y && curry!=null){
			prevy = curry;
			curry = curry.next;
		}
		if(currx==null || curry == null)
			return;
		if(prevx!= null)
			prevx.next = curry;
		else
			head = curry;
		
		if(prevy!=null)
			prevy.next = currx;
		else
			head = currx;
		
		Node temp = currx.next;
		currx.next = curry.next;
		curry.next = temp;
	}
	public Node reverseListSimple(Node node){
		Node curr = node;
		Node prev = null;
		Node next = null;
		while(curr!=null){
			next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
		}
		//System.out.println();
		node = prev;
	//	System.out.println(node.data);
		return node;
	}
	public void createOddList(){
		Node n = new Node(2);
		a = n;
		for(int i=4;i<=10;i=i+2){
			n = n.next = new Node(i);
		}
	}
	public void createEvenList(){
		Node n = new Node(1);
		b = n;
		for(int i=3;i<=10;i=i+2){
			n = n.next = new Node(i);
		}
	}
	public void printOddList(){
		Node t = a;
		while(t.next!=null){
			System.out.print(t.data+" ");
			t = t.next;
		}
	}
	public void printEvenList(){
		Node t = b;
		while(t.next!=null){
			System.out.print(t.data+" ");
			t = t.next;
		}
	}
	public boolean searchIterative(int data){
		Node t = head;
		while(t!=null){
			if(t.data == data){
				flag = true;
				break;
			}
			t = t.next;
		}
		return flag;
	}
	public boolean searchRecursive(Node node,int data){
		if(node==null)
			flag = false;
		else if(node.data == data)
			flag = true;
		else 
			searchRecursive(node.next,data);
		return flag;
	}
	public Node sortMerge(Node one,Node two){
		Node result = null;
		if(one==null)
			return two;
		else if(two == null)
			return one;
		if(one.data<=two.data){
			result = one;
			result.next = sortMerge(one.next,two);
		}
		else{
			result = two;
			result.next = sortMerge(one,two.next);
		}
		 return(result);
	}
	public Node nthNode(int n){
		int count = 0;
		Node t = head;
		Node temp = null;
		while(t!=null ){
			if(count==n)
			{
				temp = t;
				break;
			}
			count++;
			t=t.next;
		}
		return temp;
	}
	public Node middleNode(){
		Node slow = head;
		Node fast = head;
		
		while(fast!=null && fast.next!=null){
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow;
	}
	public void insertInSort(int val){
		Node t = new Node(val);
		Node temp = head;
		Node prev = null;
		Node nextNode = null;
		if(head == null)
			head = t;
		else if(val<head.data){
			head = t;
			t.next = temp;
		}
		else{
			while(temp!=null){
				if(temp.data<val && temp.next.data>val){
					prev  = temp;
					nextNode = temp.next;
					temp.next = t;
					t.next = nextNode;
					break;
				}
				temp = temp.next;
			}
//			System.out.println(prev.data+ " " +nextNode.data);
		}
	}
	public void deleteGivenPointer(Node n1){
		Node temp = n1.next;
        n1.data = temp.data;
        n1.next = temp.next;
        temp = null;
	}
	public void createPalindromeList(){
		head = new Node(1);
		Node t = head;
		t.next = new Node(1);
		t.next.next = new Node(2);
		t.next.next.next = new Node(11);
		t.next.next.next.next = new Node(1);
	}
	public boolean checkPalindrome(){
		boolean pflag = true;
		Node t = head;
		
		while(t!=null){
			stk.push(t.data);
			t =t.next;
		}
		
		Node temp = head;
		while(!stk.empty()){
			Integer datan = (Integer)stk.pop();
			int nodedata = temp.data;
			
			if(datan!=nodedata){
				pflag = false;
				break;
			}
			temp = temp.next;
		}return pflag;
	}
	public void createLongList(){
		a = new Node(3);
		Node a1 = a;
		a1.next = new Node(6);
		a1.next.next = new Node(9);
		a1.next.next.next =  new Node(15);
		a1.next.next.next.next = new Node(30);
	}
	public void createShortList(){
		b = new Node(10);
		Node b1 = b;
		b1.next = new Node(15);
		b1.next.next = new Node(30);
	}
	public Node mergingPoint(){
		Node temp1 = a;
		Node temp2 = b;
		Node comnode = null;
		int c1 = 0;
		int c2 = 0;
		while(temp1!=null){
			c1 = c1+1;
			temp1=temp1.next;
		}
		while(temp2!=null){
			c2 = c2+1;
			temp2 = temp2.next;
		}
		int absval = Math.abs(c1-c2);
		if(c1>c2){
			int counter = 0;
			Node tt = a;
			while(tt!=null){
				if(counter == absval)
				{
					break;
				}
				counter = counter+1;
				tt = tt.next;
			}
			comnode = tt;
		}else if(c2>c1){
			int counter = 0;
			Node tt = b;
			while(tt!=null){
				if(counter == absval)
				{
					break;
				}
				counter = counter+1;
				tt = tt.next;
			}
			comnode = tt;
		}else{
			comnode = a;
		}
		return comnode.next;
	}
	public Node[] splitArray(){
		///////////*****************************************************need to check
		h1=new Node(head.data);
		h2 = new Node (head.next.data);
		Node h11 = h1;
		Node h22 = h2;
		Node temp = head;
		//System.out.println(h11.data+" "+h22.data);
		while(temp.next.next!=null){
			h11 = h11.next = new Node(temp.data);
	//		System.out.println(h11.data);
			temp = temp.next.next;
		}
		Node temp1 = head.next;
		while(temp1.next!=null && temp1!=null){
			h22 = h22.next = new Node(temp1.data);
	//		System.out.println(temp1.data);
			temp1 = temp1.next.next;
		}
		arr[0] = h1;
		arr[1] = h2;
		return arr;
		///////////*****************************************************need to check
	}
	public void deleteAlternate(){
		Node prev = head;
		Node curr = head.next;
		if(head==null)
			return;
		while(prev!=null && curr!=null){
			prev.next = curr.next;
			curr = null;
			prev = prev.next;
			if(prev!=null)
				curr = prev.next;
		}
	}
	public Node moveLastToFront(){
		Node temp = head;
		Node temp1 = null;
		while(temp.next!=null){
			temp1 = temp;
			temp=temp.next;
		}
		temp.next = head;
		head = temp;
		temp1.next = null;
		return head;
	}
	public void createListA(){
		a = new Node(1);
		a.next = new Node(2);
		a.next.next = new Node(3);
		a.next.next.next= new Node(4);
		a.next.next.next.next = new Node(6);
	}
	public void createListB(){
		b = new Node(2);
		b.next = new Node(4);
		b.next.next = new Node(6);
		b.next.next.next = new Node(8);
	}
	public Node intersectionOfSortedList(){
		/**************************************************************need to be checked*******************************/
		createListA();
		createListB();
		Node res = null;
		Node tempA = a;
		Node tempB = b;
		
		while(tempA!=null || tempB!=null){
			System.out.println(tempA.data+" "+tempB.data);
			if(tempB.data == tempA.data){
				res = new Node(tempA.data);
				tempA=tempA.next;
				tempB = tempB.next;
				res = res.next;
			}
			else if(tempA.data<tempB.data)
				tempA=tempA.next;
			else 
				tempB=tempB.next;
		}
		return res;
		/**************************************************************need to be checked*******************************/
	}
	public void pairwiseSwap(Node headn){
		if(headn!=null && headn.next!=null)
		{
			swap(headn,headn.next);
			pairwiseSwap(headn.next.next);
		}
	}
	public void swap(Node n1,Node n2){
		int temp = n1.data;
		n1.data = n2.data;
		n2.data = temp;
	}
	public void createListWithDuplicates(){
		head = new Node(10);
		head.next = new Node(10);
		head.next.next = new Node(20);
		head.next.next.next=new Node(20);
		head.next.next.next.next = new Node(20);
		head.next.next.next.next.next = new Node(20);
		head.next.next.next.next.next.next = new Node(30);
		head.next.next.next.next.next.next.next = new Node(30);
		head.next.next.next.next.next.next.next.next = new Node(40);
	}
	public void removeDuplicatesFromUnsorted(){
		
	}
	public Node removeDuplicatesFromSorted(){
		createListWithDuplicates();
		Node temp = head;Node val = null;Node nlist = head;
		while(temp!=null && temp.next!=null){
			if(temp.data == temp.next.data){
				
				val = temp.next;
				temp.next = val.next;
				val =null;
				
			}
			else{
				temp = temp.next;
				
			}
			
		}
		return head;
	}
	public void createListOne(){
		a = new Node(1);
		a.next = new Node(2);
		a.next.next = new Node(3);
		a.next.next.next = new Node(4);
		a.next.next.next.next = new Node(5);
	}
	public void createListTwo(){
		b = new Node(1);
		b.next = new Node(2);
		b.next.next = new Node(3);
		b.next.next.next = new Node(4);
		b.next.next.next.next = new Node(5);
	}
	public boolean similarList(){
		createListOne();
		createListTwo();
		boolean sflag = true;
		int count1 =0,count2=0;
		Node tempa = a;
		Node tempb = b;
		while(tempa!=null){
			count1++;
			tempa = tempa.next;
		}
		while(tempb!=null){
			count2++;
			tempb=tempb.next;
		}
		if(count1!=count2)
			sflag = false;
		else{
			while(tempa!=null && tempb!=null){
				if(tempa.data!=tempb.data){
					sflag = false;
					break;
				}
			}
		}
		return sflag;
	}
	public void createCricularList(){
		head = new Node(10);
		head.next = new Node(20);
		head.next.next = new Node(30);
		head.next.next.next = new Node(40);
		head.next.next.next.next = head;
	}
	public boolean detectLoop(){
		createCricularList();
		boolean sflag = false;
		Node slow = head;
		Node fast = head;
		while(true){
			if(slow.data == fast.data){
					sflag = true;
					break;
			}
			slow = slow.next;
			fast = fast.next.next;
		}
		return sflag;
	}
	public Node removeLoop(){
		createCricularList();
		Node slow = head;
		Node fast = head.next;
		while(true){
			if(slow.data == fast.data){
					break;
			}
			slow = slow.next;
			fast = fast.next.next;
		}
		fast.next = null;
		return head;
	}
	public void AlternateKPairReversing(){
	}
	public void createRightList(){
		head = new Node(3);
		head.next = new Node(2);
		head.next.next = new Node(6);
		head.next.next.next = new Node(5);
		head.next.next.next.next = new Node(11);
		head.next.next.next.next.next = new Node(10);
		head.next.next.next.next.next.next = new Node(15);
		head.next.next.next.next.next.next.next = new Node(12);
	}
	public Node DeleteNodesGreaterOnRightSide(){
		createRightList();
		Node rev = reverseListSimple(head);
	//	System.out.println(rev.data);
		Node max = rev;
		Node prev = null;
		Node temp = rev;
		while(temp!=null&&temp.next!=null){
			if(temp.next.data<max.data){
				//System.out.println(temp.data);
				prev = temp.next;
				temp.next = prev.next;
				temp = null;
			}else{
				//System.out.println(temp.data);
				temp = temp.next;
				max = temp;
			}
		}
		head = reverseListSimple(rev);
		return head;
	}
	public void createSegregateList(){
		head = new Node(10);
		head.next = new Node(20);
		head.next.next = new Node(40);
		head.next.next.next = new Node(35);
		head.next.next.next.next = new Node(67);
		head.next.next.next.next.next = new Node(90);
		head.next.next.next.next.next.next = new Node(11);
		head.next.next.next.next.next.next.next = new Node(100);
	}
	public Node[] EvenOddSegregate(){
		/**************************************************************need to be checked*******************************/
		createSegregateList();
		Node a=b=null;
		Node temp = head;
		while(temp!=null){
			if(temp.data%2==0){
				a = new Node(temp.data);
				a = a.next;
				temp = temp.next;
				System.out.println(temp.data);
			}else{
				b = new Node(temp.data);
				b = b.next;
				temp = temp.next;
				System.out.println(temp.data);
			}
		}
		return new Node[]{a,b};
		/**************************************************************need to be checked*******************************/
	}
	public Node UnionOfLists(){
	/**************************************************************need to be checked*******************************/
		createListA();
		createListB();
		Node res = null;
		Node tempA = a;
		Node tempB = b;
		
		while(tempA!=null || tempB!=null){
			System.out.println(tempA.data+" "+tempB.data);
			if(tempB.data == tempA.data){
				tempA=tempA.next;
				tempB = tempB.next;
				
			}
			else if(tempA.data<tempB.data){
				res = new Node(tempA.data);
				tempA=tempA.next;
				res = res.next;
			}
			else {
				res = new Node(tempB.data);
				tempB=tempB.next;
				res = res.next;
			}
		}
		return res;
	/**************************************************************need to be checked*******************************/
	}
	public void makeListOne(){
		a = new Node(2);
		a.next = new Node(3);
		a.next.next = new Node(8);
		a.next.next.next = new Node(1);
		a.next.next.next.next = new Node(4);
	}
	public void makeListTwo(){
		b = new Node(6);
		b.next = new Node(7);
		b.next.next = new Node(4);
		b.next.next.next = new Node(10);
	}
	public Node AddTwoNumbers(){
		makeListOne();
		makeListTwo();
		Node temp = null;
		Node res = null;
		Node prev = null;
		Node first = a;
		Node second = b;
		int sum = 0,carry =0;
		while(first != null || second != null){
			sum = carry + (first!=null?first.data:0) + (second!=null?second.data:0);
			carry = (sum >= 10) ? 1 : 0;
			sum = sum % 10;
			temp = new Node(sum);
			if (res == null) {
                res = temp;
            } else // If this is not the first node then connect it to the rest.
            {
                prev.next = temp;
            }
			prev = temp;
 
            // Move first and second pointers to next nodes
            if (first != null) {
                first = first.next;
            }
            if (second != null) {
                second = second.next;
            }
        }
 
        if (carry > 0) {
            temp.next = new Node(carry);
        }
 
        // return head of the resultant list
        return res;
	}
	public void DeleteNodeWithConditions(Node h,Node givenNode){
		Node temp = h;
		Node prev = null;
		while(temp!=null&&temp.next!=null){
			if(givenNode.data == temp.next.data){
				temp.next = temp.next.next;
			}
			temp = temp.next;
		}
	}
	public Node RotateCounterClockWise(int n){
		Node temp = head;
		Node link = null,link1= null,nhead=null,endnode=null,nheadnext = null,olhead=head;
		int count = 0;
		while(temp!=null){
			count = count+1;
			if(count == n){
				link = temp;
				link1 = temp.next;
				break;
			}
			temp = temp.next;
		}
		temp = head;
		while(temp!=null){
			if(temp.next==null){
				endnode = temp;
				break;
			}temp = temp.next;
		}
		endnode.next = head;
		link.next = null;
		head = link1;
		return head;
	}
	Node push(Node head_ref, int data)
    {
        Node new_node = new Node(data);
        new_node.down = head_ref;
        head_ref = new_node;
        return head_ref;
    }
	public void FlattenList(){
	}
	public void FlattenMultiLevel(){
	}
	public Node DeleteMnodesAfterNnodes(int m,int n){
		int cnt =0;
		Node temp = head;
		Node link = null,linkend = null;
		while(temp!=null){
			cnt = cnt+1;
			if(cnt == m){
				link = temp;
			}
			temp = temp.next;
			if(cnt == (m+n)){
				linkend = temp;
			}
		}
		link.next = linkend.next;
		return head;
	}
	public void QuickSort(){
	}
	public void PairwiseSwapWithoutDataSwap(){
	}
	public void RemoveMiddlePoints(){
	}
	public void MaximumSumList(){
	}
	public void CloneListSetOne(){
	}
	public void CloneListSetTwo(){
	}
	public void InsertionSort(){
	}
	public void PointNextHigherVal(){
	}
	public void RearrangeList(){
	}
	public Node MergeAlternatePositions(){
		makeListOne();
		makeListTwo();
		Node p_curr = a, q_curr = b;
        Node p_next, q_next;
		while((p_curr != null && q_curr != null)){
			 // Save next pointers
            p_next = p_curr.next;
            q_next = q_curr.next;
 
            // make q_curr as next of p_curr
            q_curr.next = p_next; // change next pointer of q_curr
            p_curr.next = q_curr; // change next pointer of p_curr
 
            // update current pointers for next iteration
            p_curr = p_next;
            q_curr = q_next;
		}
		//b.head = q_curr;
		return a;
	}
	public Node[] FindTriplet(int sum){
		Node[] sumarr = new Node[3];
		
		return sumarr;
	} 
	public void makeZeroOneList(){
		head = new Node(1);
		head.next = new Node(0);
		head.next.next = new Node(1);
		head.next.next.next= new Node(0);
		head.next.next.next.next = new Node(2);
		head.next.next.next.next.next = new Node(2);
		head.next.next.next.next.next.next = new Node(1);
		head.next.next.next.next.next.next.next = new Node(2);
		head.next.next.next.next.next.next.next.next = new Node(2);
		head.next.next.next.next.next.next.next.next.next = new Node(1);
		head.next.next.next.next.next.next.next.next.next.next = new Node(0);
		head.next.next.next.next.next.next.next.next.next.next.next = new Node(2);
		head.next.next.next.next.next.next.next.next.next.next.next.next = new Node(1);
		
	}
	public void SortZeroOneList(){
		makeZeroOneList();
		int countz=0,counto=0,countt=0;
		Node node = head;
		while(node!=null){
			if(node.data == 0){
				countz++;
			}else if(node.data ==1){
				counto++;
			}else{
				countt++;
			}
			node = node.next;
		}
		head = new Node(0);
		Node n = head;
		for(int i=0;i<countz-1;i++)
			n = n.next = new Node(0);
		for(int i=0;i<counto;i++)
			n = n.next = new Node(1);
		for(int i=0;i<countt;i++)
			n = n.next = new Node(2);
	}
}
class MainClass{
	public static void main(String[] args){
		LinkedList lst = new LinkedList();
		/*lst.createList();
		lst.printList(lst.head);
		System.out.println();
		lst.insertInMiddle(50,55);
		lst.printList(lst.head);
		System.out.println();
		lst.insertInFront(100);
		lst.printList(lst.head);
		System.out.println();
		lst.insertInEnd(110);
		lst.printList(lst.head);
		System.out.println();
		lst.deleteFromFront();
		lst.printList(lst.head);
		System.out.println();
		lst.deleteFromEnd();
		lst.printList(lst.head);
		System.out.println();
		lst.deleteAfterNode();
		lst.printList(lst.head);
		System.out.println();
		Node temp = lst.reverseListSimple(lst.head);
		lst.printList(temp);
		System.out.println();
		lst.createOddList();
		lst.printOddList();
		System.out.println();
		lst.createEvenList();
		lst.printEvenList();
		System.out.println();
		Node tempvar = lst.sortMerge(lst.a,lst.b);
		lst.printList(tempvar);
		boolean flag = lst.searchRecursive(lst.head,20);
		System.out.println("Search Result "+flag);
		Node tempnth = lst.nthNode(5);
		System.out.println("Nth Node in the list "+tempnth.data);	
		Node midNode = lst.middleNode();
		System.out.println("Middle Node "+midNode.data);
		lst.insertInSort(55);
		lst.printList(lst.head);
		lst.deleteGivenPointer(lst.head.next.next.next);
		lst.printList(lst.head);
		lst.createPalindromeList();
		System.out.println("is palindrome "+lst.checkPalindrome());
		lst.createLongList();
		lst.createShortList();
		System.out.println("Merging point "+lst.mergingPoint().data);
		Node[] n = lst.splitArray();
		lst.printList(lst.arr[0]);
		System.out.println();
		lst.printList(lst.arr[1]);
		lst.deleteAlternate();
		lst.printList(lst.moveLastToFront());
		lst.printList(lst.intersectionOfSortedList());
		/*lst.pairwiseSwap(lst.head);
		lst.printList(lst.head);
		lst.printList(lst.removeDuplicatesFromSorted());
		System.out.println("Lists are similiar "+lst.similarList());
		System.out.println("Loop Found "+lst.detectLoop());
		lst.printList(lst.removeLoop());
		lst.printList(lst.UnionOfLists());*/
		/*Node narr [] = lst.EvenOddSegregate();
		lst.printList(narr[0]);
		lst.printList(narr[1]);
		lst.printList(lst.AddTwoNumbers());
		lst.DeleteNodesGreaterOnRightSide();
		lst.printList(lst.head);
		lst.createList();
		lst.DeleteNodeWithConditions(lst.head,lst.head.next.next.next);
		lst.printList(lst.head);
		lst.createList();
		lst.printList(lst.RotateCounterClockWise(4));
		lst.SortZeroOneList();
		lst.printList(lst.head);
		lst.createList();
		Node val = lst.DeleteMnodesAfterNnodes(4,3);
		lst.printList(lst.head);*/
		lst.printList(lst.MergeAlternatePositions());
	}
}
